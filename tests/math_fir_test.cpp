#include <xitren/math/fir.hpp>

#include <gtest/gtest.h>

#include <cstring>
#include <iostream>
#include <limits>

using namespace xitren::math;

template <size_t Size>
bool
arrays_match(const std::array<double, Size>& expected, const std::array<double, Size>& actual)
{
    for (size_t i{0}; i < Size; ++i) {
        // std::numeric_limits<double>::epsilon() = 52bit fraction
        // Chebishev sin alg ~ = 52 +- 5 bit
        if (std::abs(expected[i] - actual[i])
            > (std::numeric_limits<double>::epsilon() * std::pow(2, 5))) {
            std::cout << "array[" << i << "] (" << actual[i] << ") != expected[" << i << "] ("
                      << expected[i] << ")" << std::endl;
            return false;
        }
    }
    return true;
}

TEST(fir_test, moving_average)
{
    double            test;
    moving_average<5> averager;
    averager.value(5.);
    averager.value(5.);
    averager.value(5.);
    averager.value(5.);
    (test = averager.value(5.));
    EXPECT_EQ(static_cast<int>(test), 5);
    averager.value(10.);
    averager.value(10.);
    averager.value(10.);
    averager.value(10.);
    (test = averager.value(10.));
    EXPECT_EQ(static_cast<int>(test), 10);
    (test = averager.value(20.));
    EXPECT_TRUE(static_cast<int>(test) > 10);
}

TEST(fir_test, lowpass)
{
    std::array<double, 21> arr{-0.03027306914562628,
                               -0.03474130477547084,
                               -0.03065774782638312,
                               -0.016739669209502685,
                               0.006649134551816705,
                               0.03741957135154557,
                               0.07200384902161835,
                               0.10589392477812805,
                               0.13437896293417126,
                               0.15334695717194,
                               0.16,
                               0.15334695717194,
                               0.13437896293417126,
                               0.10589392477812805,
                               0.07200384902161835,
                               0.03741957135154557,
                               0.006649134551816705,
                               -0.016739669209502685,
                               -0.03065774782638312,
                               -0.03474130477547084,
                               -0.03027306914562628};
    lowpass<20, 20, 250>   filter;
    EXPECT_TRUE(arrays_match(arr, filter.table()));
}

TEST(fir_test, highpass)
{
    std::array<double, 21> arr{0.03027306914562628,
                               0.03474130477547084,
                               0.03065774782638312,
                               0.016739669209502685,
                               -0.006649134551816705,
                               -0.03741957135154557,
                               -0.07200384902161835,
                               -0.10589392477812805,
                               -0.13437896293417126,
                               -0.15334695717194,
                               0.84,
                               -0.15334695717194,
                               -0.13437896293417126,
                               -0.10589392477812805,
                               -0.07200384902161835,
                               -0.03741957135154557,
                               -0.006649134551816705,
                               0.016739669209502685,
                               0.03065774782638312,
                               0.03474130477547084,
                               0.03027306914562628};
    highpass<20, 20, 250>  filter;
    EXPECT_TRUE(arrays_match(arr, filter.table()));
}

TEST(fir_test, bandstop)
{
    std::array<double, 21>    arr{-0.011563283469853507,
                               -0.04776104749397292,
                               -0.06974171569878782,
                               -0.047867970834589026,
                               0.019842542831567514,
                               0.09796570964279813,
                               0.1333193446743846,
                               0.09259565567449464,
                               -0.00962873510906545,
                               -0.11541096869640252,
                               0.84,
                               -0.11541096869640252,
                               -0.00962873510906545,
                               0.09259565567449464,
                               0.1333193446743846,
                               0.09796570964279813,
                               0.019842542831567514,
                               -0.047867970834589026,
                               -0.06974171569878782,
                               -0.04776104749397292,
                               -0.011563283469853507};
    bandstop<20, 20, 40, 250> filter;
    EXPECT_TRUE(arrays_match(arr, filter.table()));
}

TEST(fir_test, bandpass)
{
    std::array<double, 21>    arr{0.011563283469853507, 0.04776104749397292,   0.06974171569878782,
                               0.047867970834589026, -0.019842542831567514, -0.09796570964279813,
                               -0.1333193446743846,  -0.09259565567449464,  0.00962873510906545,
                               0.11541096869640252,  0.16000000000000003,   0.11541096869640252,
                               0.00962873510906545,  -0.09259565567449464,  -0.1333193446743846,
                               -0.09796570964279813, -0.019842542831567514, 0.047867970834589026,
                               0.06974171569878782,  0.04776104749397292,   0.011563283469853507};
    bandpass<20, 20, 40, 250> filter;
    EXPECT_TRUE(arrays_match(arr, filter.table()));
}

TEST(fir_test, custom_filter)
{
    filter<5> filter{std::array<double, 5>{0.195761478272605788, 0.202111172410324363,
                                           0.204254698634139670, 0.202111172410324363,
                                           0.195761478272605788}};    // https://fiiir.com/
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(25.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(305.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
}

TEST(fir_test, custom_mid_size_filter)
{
    filter<91> filter{
        std::array<double, 91>{-0.001502116839846245, -0.001081186705517384, -0.000634392034347178,
                               -0.000162630857175135, 0.000333089700366734,  0.000851656286610844,
                               0.001391852666090162,  0.001952363523561613,  0.002531778715981624,
                               0.003128597956510754,  0.003741235912601553,  0.004368027698275949,
                               0.005007234738835042,  0.005657050984474012,  0.006315609447606731,
                               0.006980989037146598,  0.007651221661549709,  0.008324299571110919,
                               0.008998182908819066,  0.009670807438030588,  0.010340092414316002,
                               0.011003948568076157,  0.011660286163918459,  0.012307023102330608,
                               0.012942093028893412,  0.013563453416136351,  0.014169093583161147,
                               0.014757042618339525,  0.015325377170730962,  0.015872229076364094,
                               0.016395792786178004,  0.016894332563225669,  0.017366189417696864,
                               0.017809787749417636,  0.018223641668723877,  0.018606360967980882,
                               0.018956656717523761,  0.019273346461417842,  0.019555358990176214,
                               0.019801738669416001,  0.020011649305376338,  0.020184377530251370,
                               0.020319335692400770,  0.020416064238679046,  0.020474233578362661,
                               0.020493645420441079,  0.020474233578362661,  0.020416064238679046,
                               0.020319335692400770,  0.020184377530251370,  0.020011649305376338,
                               0.019801738669416001,  0.019555358990176214,  0.019273346461417842,
                               0.018956656717523761,  0.018606360967980882,  0.018223641668723877,
                               0.017809787749417636,  0.017366189417696864,  0.016894332563225669,
                               0.016395792786178004,  0.015872229076364094,  0.015325377170730962,
                               0.014757042618339525,  0.014169093583161147,  0.013563453416136351,
                               0.012942093028893412,  0.012307023102330608,  0.011660286163918459,
                               0.011003948568076157,  0.010340092414316002,  0.009670807438030588,
                               0.008998182908819066,  0.008324299571110919,  0.007651221661549709,
                               0.006980989037146598,  0.006315609447606731,  0.005657050984474012,
                               0.005007234738835042,  0.004368027698275949,  0.003741235912601553,
                               0.003128597956510754,  0.002531778715981624,  0.001952363523561613,
                               0.001391852666090162,  0.000851656286610844,  0.000333089700366734,
                               -0.000162630857175135, -0.000634392034347178, -0.001081186705517384,
                               -0.001502116839846245}};    // https://fiiir.com/

    for (int i = 0; i < 100; i++)
        filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(25.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
    filter.value(305.);
    filter.value(5.);
    filter.value(5.);
    filter.value(5.);
}
